// Do not edit this file!  It was generated by Melati POEM's DSD preprocessor.

package org.paneris.melati.boards.model.generated;

import org.paneris.melati.boards.model.User;
import org.paneris.melati.boards.model.UserTable;
import org.paneris.melati.boards.model.Setting;
import org.paneris.melati.boards.model.SettingTable;
import org.paneris.melati.boards.model.*;
import java.util.*;
import java.sql.Date;
import java.sql.Timestamp;
import org.melati.poem.*;

public class AttachmentTableBase extends Table {

  private Column col_id = null;
  private Column col_message = null;
  private Column col_filename = null;
  private Column col_path = null;
  private Column col_url = null;
  private Column col_size = null;
  private Column col_type = null;

  public AttachmentTableBase(
      Database database, String name,
      DefinitionSource definitionSource) throws PoemException {
    super(database, name, definitionSource);
  }

  public AttachmentTableBase(
      Database database, String name) throws PoemException {
    this(database, name, DefinitionSource.dsd);
  }

  public BoardsDatabaseTables getBoardsDatabaseTables() {
    return (BoardsDatabaseTables)getDatabase();
  }

  protected void init() throws PoemException {
    super.init();
    defineColumn(col_id =
        new Column(this, "id", new TroidPoemType(), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((Attachment)g).getId();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((Attachment)g).setId((Integer)cooked);
          }

          public Field asField(Persistent g) {
            return ((Attachment)g).getIdField();
          }

          protected boolean defaultUserEditable() {
            return false;
          }

          protected boolean defaultUserCreateable() {
            return false;
          }

          protected int defaultDisplayOrder() {
            return 0;
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((Attachment)g).getId_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((Attachment)g).setId_unsafe((Integer)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((Attachment)g).getId();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((Attachment)g).setId((Integer)raw);
          }
        });

    defineColumn(col_message =
        new Column(this, "message", new ReferencePoemType(getBoardsDatabaseTables().getMessageTable(), false), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((Attachment)g).getMessage();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((Attachment)g).setMessage((Message)cooked);
          }

          public Field asField(Persistent g) {
            return ((Attachment)g).getMessageField();
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.summary;
          }

          protected Searchability defaultSearchability() {
            return Searchability.yes;
          }

          protected Integer defaultDisplayOrderPriority() {
            return new Integer(0);
          }

          protected int defaultDisplayOrder() {
            return 1;
          }

          protected String defaultDescription() {
            return "The message this attachment belongs to";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((Attachment)g).getMessage_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((Attachment)g).setMessage_unsafe((Integer)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((Attachment)g).getMessageTroid();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((Attachment)g).setMessageTroid((Integer)raw);
          }

          public StandardIntegrityFix defaultIntegrityFix() {
            return StandardIntegrityFix.delete;
          }
        });

    defineColumn(col_filename =
        new Column(this, "filename", new StringPoemType(false, -1), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((Attachment)g).getFilename();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((Attachment)g).setFilename((String)cooked);
          }

          public Field asField(Persistent g) {
            return ((Attachment)g).getFilenameField();
          }

          protected boolean defaultUserEditable() {
            return false;
          }

          protected boolean defaultUserCreateable() {
            return false;
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.primary;
          }

          protected Searchability defaultSearchability() {
            return Searchability.yes;
          }

          protected Integer defaultDisplayOrderPriority() {
            return new Integer(1);
          }

          protected int defaultDisplayOrder() {
            return 2;
          }

          protected String defaultDescription() {
            return "The filename of this attachment";
          }

          protected int defaultWidth() {
            return 40;
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((Attachment)g).getFilename_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((Attachment)g).setFilename_unsafe((String)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((Attachment)g).getFilename();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((Attachment)g).setFilename((String)raw);
          }
        });

    defineColumn(col_path =
        new Column(this, "path", new StringPoemType(false, -1), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((Attachment)g).getPath();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((Attachment)g).setPath((String)cooked);
          }

          public Field asField(Persistent g) {
            return ((Attachment)g).getPathField();
          }

          protected boolean defaultUserCreateable() {
            return false;
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.record;
          }

          protected Searchability defaultSearchability() {
            return Searchability.yes;
          }

          protected int defaultDisplayOrder() {
            return 3;
          }

          protected String defaultDescription() {
            return "The path to this attachment";
          }

          protected int defaultWidth() {
            return 40;
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((Attachment)g).getPath_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((Attachment)g).setPath_unsafe((String)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((Attachment)g).getPath();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((Attachment)g).setPath((String)raw);
          }
        });

    defineColumn(col_url =
        new Column(this, "url", new StringPoemType(false, -1), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((Attachment)g).getUrl();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((Attachment)g).setUrl((String)cooked);
          }

          public Field asField(Persistent g) {
            return ((Attachment)g).getUrlField();
          }

          protected boolean defaultUserCreateable() {
            return false;
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.record;
          }

          protected Searchability defaultSearchability() {
            return Searchability.yes;
          }

          protected int defaultDisplayOrder() {
            return 4;
          }

          protected String defaultDescription() {
            return "A url to this attachment";
          }

          protected int defaultWidth() {
            return 40;
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((Attachment)g).getUrl_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((Attachment)g).setUrl_unsafe((String)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((Attachment)g).getUrl();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((Attachment)g).setUrl((String)raw);
          }
        });

    defineColumn(col_size =
        new Column(this, "size", new IntegerPoemType(false), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((Attachment)g).getSize();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((Attachment)g).setSize((Integer)cooked);
          }

          public Field asField(Persistent g) {
            return ((Attachment)g).getSizeField();
          }

          protected boolean defaultUserEditable() {
            return false;
          }

          protected boolean defaultUserCreateable() {
            return false;
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.summary;
          }

          protected Searchability defaultSearchability() {
            return Searchability.no;
          }

          protected int defaultDisplayOrder() {
            return 5;
          }

          protected String defaultDescription() {
            return "The size of the file in bytes";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((Attachment)g).getSize_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((Attachment)g).setSize_unsafe((Integer)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((Attachment)g).getSize();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((Attachment)g).setSize((Integer)raw);
          }
        });

    defineColumn(col_type =
        new Column(this, "type", new ReferencePoemType(getBoardsDatabaseTables().getAttachmentTypeTable(), false), DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((Attachment)g).getType();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((Attachment)g).setType((AttachmentType)cooked);
          }

          public Field asField(Persistent g) {
            return ((Attachment)g).getTypeField();
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.summary;
          }

          protected Searchability defaultSearchability() {
            return Searchability.yes;
          }

          protected int defaultDisplayOrder() {
            return 6;
          }

          protected String defaultDescription() {
            return "The type of this attachment";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((Attachment)g).getType_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((Attachment)g).setType_unsafe((Integer)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((Attachment)g).getTypeTroid();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((Attachment)g).setTypeTroid((Integer)raw);
          }
        });
  }

  public final Column getIdColumn() {
    return col_id;
  }

  public final Column getMessageColumn() {
    return col_message;
  }

  public final Column getFilenameColumn() {
    return col_filename;
  }

  public final Column getPathColumn() {
    return col_path;
  }

  public final Column getUrlColumn() {
    return col_url;
  }

  public final Column getSizeColumn() {
    return col_size;
  }

  public final Column getTypeColumn() {
    return col_type;
  }

  public Attachment getAttachmentObject(Integer troid) {
    return (Attachment)getObject(troid);
  }

  public Attachment getAttachmentObject(int troid) {
    return (Attachment)getObject(troid);
  }

  protected Persistent _newPersistent() {
    return new Attachment();
  }
  protected String defaultDescription() {
    return "A file sent as an attachment to a message";
  }

  protected String defaultCategory() {
    return "Boards";
  }

  protected int defaultDisplayOrder() {
    return 1070;
  }
}
