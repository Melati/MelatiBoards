// Do not edit this file!  It was generated by Melati POEM's DSD preprocessor.

package org.paneris.melati.boards.model.generated;


import java.util.Collections;
import java.util.Enumeration;
import java.util.List;
import org.melati.poem.AccessPoemException;
import org.melati.poem.CachedSelection;
import org.melati.poem.Column;
import org.melati.poem.Field;
import org.melati.poem.JdbcPersistent;
import org.melati.poem.ValidationPoemException;
import org.melati.poem.util.EmptyEnumeration;
import org.paneris.melati.boards.model.Attachment;
import org.paneris.melati.boards.model.AttachmentTypeTable;
import org.paneris.melati.boards.model.BoardsDatabaseTables;


/**
 * Melati POEM generated abstract base class for a <code>Persistent</code> 
 * <code>AttachmentType</code> Object.
 *
 * see org.melati.poem.prepro.TableDef#generatePersistentBaseJava 
 */
public abstract class AttachmentTypeBase extends JdbcPersistent {


 /**
  * Retrieves the Database object.
  * 
  * see org.melati.poem.prepro.TableDef#generatePersistentBaseJava 
  * @return the database
  */
  public BoardsDatabaseTables getBoardsDatabaseTables() {
    return (BoardsDatabaseTables)getDatabase();
  }


 /**
  * Retrieves the  <code>AttachmentTypeTable</code> table 
  * which this <code>Persistent</code> is from.
  * 
  * see org.melati.poem.prepro.TableDef#generatePersistentBaseJava 
  * @return the AttachmentTypeTable
  */
  public AttachmentTypeTable getAttachmentTypeTable() {
    return (AttachmentTypeTable)getTable();
  }

  private AttachmentTypeTable _getAttachmentTypeTable() {
    return (AttachmentTypeTable)getTable();
  }

  // Fields in this table 
 /**
  * id 
  */
  protected Integer id;
 /**
  * type - The name of a type 
  */
  protected String type;


 /**
  * Retrieves the <code>Id</code> value, without locking, 
  * for this <code>AttachmentType</code> <code>Persistent</code>.
  *
  * see org.melati.poem.prepro.FieldDef#generateBaseMethods 
  * @return the Integer id
  */
  public Integer getId_unsafe() {
    return id;
  }


 /**
  * Sets the <code>Id</code> value directly, without checking, 
  * for this AttachmentType <code>Persistent</code>.
  * 
  * see org.melati.poem.prepro.FieldDef#generateBaseMethods 
  * @param cooked  the pre-validated value to set
  */
  public void setId_unsafe(Integer cooked) {
    id = cooked;
  }

 /**
  * Retrieves the Id value, with locking, for this 
  * <code>AttachmentType</code> <code>Persistent</code>.
  * 
  * @generator org.melati.poem.prepro.AtomFieldDef#generateBaseMethods 
  * @throws AccessPoemException 
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights 
  * @return the value of the field <code>Id</code> for this 
  *         <code>AttachmentType</code> <code>Persistent</code>  
  */

  public Integer getId()
      throws AccessPoemException {
    readLock();
    return getId_unsafe();
  }


 /**
  * Sets the <code>Id</code> value, with checking, for this 
  * <code>AttachmentType</code> <code>Persistent</code>.
  * 
  * @generator org.melati.poem.prepro.AtomFieldDef#generateBaseMethods  
  * @param cooked  a validated <code>int</code> 
  * @throws AccessPoemException 
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights
  * @throws ValidationPoemException 
  *         if the value is not valid
  */
  public void setId(Integer cooked)
      throws AccessPoemException, ValidationPoemException {
    _getAttachmentTypeTable().getIdColumn().
      getType().assertValidCooked(cooked);
    writeLock();
    setId_unsafe(cooked);
  }

 /**
  * Sets the <code>Id</code> value, with checking, for this 
  * <code>AttachmentType</code> <code>Persistent</code>.
  * 
  * @generator org.melati.poem.prepro.IntegerFieldDef#generateBaseMethods 
  * @param cooked  a validated <code>int</code>
  * @throws AccessPoemException 
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights
  * @throws ValidationPoemException 
  *         if the value is not valid
  */

  public final void setId(int cooked)
      throws AccessPoemException, ValidationPoemException {
    setId(new Integer(cooked));
  }


 /**
  * Retrieves the <code>Id</code> value as a <code>Field</code>
  * from this <code>AttachmentType</code> <code>Persistent</code>.
  * 
  * see org.melati.poem.prepro.FieldDef#generateFieldCreator 
  * @throws AccessPoemException 
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights
  * @return the Integer id
  */
  public Field<Integer> getIdField() throws AccessPoemException {
    Column<Integer> c = _getAttachmentTypeTable().getIdColumn();
    return new Field<Integer>((Integer)c.getRaw(this), c);
  }


 /**
  * Retrieves the <code>Type</code> value, without locking, 
  * for this <code>AttachmentType</code> <code>Persistent</code>.
  *
  * see org.melati.poem.prepro.FieldDef#generateBaseMethods 
  * @return the String type
  */
  public String getType_unsafe() {
    return type;
  }


 /**
  * Sets the <code>Type</code> value directly, without checking, 
  * for this AttachmentType <code>Persistent</code>.
  * 
  * see org.melati.poem.prepro.FieldDef#generateBaseMethods 
  * @param cooked  the pre-validated value to set
  */
  public void setType_unsafe(String cooked) {
    type = cooked;
  }

 /**
  * Retrieves the Type value, with locking, for this 
  * <code>AttachmentType</code> <code>Persistent</code>.
  * Field description: 
  *   The name of a type 
  * 
  * @generator org.melati.poem.prepro.AtomFieldDef#generateBaseMethods 
  * @throws AccessPoemException 
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights 
  * @return the value of the field <code>Type</code> for this 
  *         <code>AttachmentType</code> <code>Persistent</code>  
  */

  public String getType()
      throws AccessPoemException {
    readLock();
    return getType_unsafe();
  }


 /**
  * Sets the <code>Type</code> value, with checking, for this 
  * <code>AttachmentType</code> <code>Persistent</code>.
  * Field description: 
  *   The name of a type 
  * 
  * @generator org.melati.poem.prepro.AtomFieldDef#generateBaseMethods  
  * @param cooked  a validated <code>int</code> 
  * @throws AccessPoemException 
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights
  * @throws ValidationPoemException 
  *         if the value is not valid
  */
  public void setType(String cooked)
      throws AccessPoemException, ValidationPoemException {
    _getAttachmentTypeTable().getTypeColumn().
      getType().assertValidCooked(cooked);
    writeLock();
    setType_unsafe(cooked);
  }


 /**
  * Retrieves the <code>Type</code> value as a <code>Field</code>
  * from this <code>AttachmentType</code> <code>Persistent</code>.
  * 
  * see org.melati.poem.prepro.FieldDef#generateFieldCreator 
  * @throws AccessPoemException 
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights
  * @return the String type
  */
  public Field<String> getTypeField() throws AccessPoemException {
    Column<String> c = _getAttachmentTypeTable().getTypeColumn();
    return new Field<String>((String)c.getRaw(this), c);
  }

  private CachedSelection<Attachment> typeAttachments = null;
  /** References to this AttachmentType in the Attachment table via its type field.*/
  @SuppressWarnings("unchecked")
  public Enumeration<Attachment> getTypeAttachments() {
    if (getTroid() == null)
      return new EmptyEnumeration<Attachment>();
    else {
      if (typeAttachments == null)
        typeAttachments =
          getBoardsDatabaseTables().getAttachmentTable().getTypeColumn().cachedSelectionWhereEq(getTroid());
      return typeAttachments.objects();
    }
  }


  /** References to this AttachmentType in the Attachment table via its type field, as a List.*/
  public List<Attachment> getTypeAttachmentList() {
    return Collections.list(getTypeAttachments());
  }



}

