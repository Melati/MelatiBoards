// Do not edit this file!  It was generated by Melati POEM's DSD preprocessor.

package org.paneris.melati.boards.model.generated;

import org.paneris.melati.boards.model.User;
import org.paneris.melati.boards.model.UserTable;
import org.paneris.melati.boards.model.*;
import java.util.*;
import java.sql.Date;
import java.sql.Timestamp;
import org.melati.poem.*;

public abstract class MessageBase extends Persistent {

  public BoardsDatabase getBoardsDatabase() {
    return (BoardsDatabase)getDatabase();
  }

  public MessageTable getMessageTable() {
    return (MessageTable)getTable();
  }

  private MessageTable _getMessageTable() {
    return (MessageTable)getTable();
  }

  protected Integer id;
  protected Integer board;
  protected Timestamp date;
  protected String subject;
  protected Integer author;
  protected Integer parent;
  protected String body;
  protected Boolean deleted;
  protected Boolean approved;

  public Integer getId_unsafe() {
    return id;
  }

  public void setId_unsafe(Integer cooked) {
    id = cooked;
  }

  public Integer getId()
      throws AccessPoemException {
    readLock();
    return getId_unsafe();
  }

  public void setId(Integer cooked)
      throws AccessPoemException, ValidationPoemException {
    _getMessageTable().getIdColumn().getType().assertValidCooked(cooked);
    writeLock();
    setId_unsafe(cooked);
  }

  public final void setId(int cooked)
      throws AccessPoemException, ValidationPoemException {
    setId(new Integer(cooked));
  }

  public Field getIdField() throws AccessPoemException {
    Column c = _getMessageTable().getIdColumn();
    return new Field(c.getRaw(this), c);
  }

  public Integer getBoard_unsafe() {
    return board;
  }

  public void setBoard_unsafe(Integer cooked) {
    board = cooked;
  }

  public Integer getBoardTroid()
      throws AccessPoemException {
    readLock();
    return getBoard_unsafe();
  }

  public void setBoardTroid(Integer raw)
      throws AccessPoemException {
    _getMessageTable().getBoardColumn().getType().assertValidRaw(raw);
    writeLock();
    setBoard_unsafe(raw);
  }

  public Board getBoard()
      throws AccessPoemException, NoSuchRowPoemException {
    Integer troid = getBoardTroid();
    return troid == null ? null :
        getBoardsDatabase().getBoardTable().getBoardObject(troid);
  }

  public void setBoard(Board cooked)
      throws AccessPoemException {
    setBoardTroid(cooked == null ? null : cooked.troid());
  }

  public Field getBoardField() throws AccessPoemException {
    Column c = _getMessageTable().getBoardColumn();
    return new Field(c.getRaw(this), c);
  }

  public Timestamp getDate_unsafe() {
    return date;
  }

  public void setDate_unsafe(Timestamp cooked) {
    date = cooked;
  }

  public Timestamp getDate()
      throws AccessPoemException {
    readLock();
    return getDate_unsafe();
  }

  public void setDate(Timestamp cooked)
      throws AccessPoemException, ValidationPoemException {
    _getMessageTable().getDateColumn().getType().assertValidCooked(cooked);
    writeLock();
    setDate_unsafe(cooked);
  }

  public Field getDateField() throws AccessPoemException {
    Column c = _getMessageTable().getDateColumn();
    return new Field(c.getRaw(this), c);
  }

  public String getSubject_unsafe() {
    return subject;
  }

  public void setSubject_unsafe(String cooked) {
    subject = cooked;
  }

  public String getSubject()
      throws AccessPoemException {
    readLock();
    return getSubject_unsafe();
  }

  public void setSubject(String cooked)
      throws AccessPoemException, ValidationPoemException {
    _getMessageTable().getSubjectColumn().getType().assertValidCooked(cooked);
    writeLock();
    setSubject_unsafe(cooked);
  }

  public Field getSubjectField() throws AccessPoemException {
    Column c = _getMessageTable().getSubjectColumn();
    return new Field(c.getRaw(this), c);
  }

  public Integer getAuthor_unsafe() {
    return author;
  }

  public void setAuthor_unsafe(Integer cooked) {
    author = cooked;
  }

  public Integer getAuthorTroid()
      throws AccessPoemException {
    readLock();
    return getAuthor_unsafe();
  }

  public void setAuthorTroid(Integer raw)
      throws AccessPoemException {
    _getMessageTable().getAuthorColumn().getType().assertValidRaw(raw);
    writeLock();
    setAuthor_unsafe(raw);
  }

  public User getAuthor()
      throws AccessPoemException, NoSuchRowPoemException {
    Integer troid = getAuthorTroid();
    return troid == null ? null :
        (User)getBoardsDatabase().getUserTable().getUserObject(troid);
  }

  public void setAuthor(User cooked)
      throws AccessPoemException {
    setAuthorTroid(cooked == null ? null : cooked.troid());
  }

  public Field getAuthorField() throws AccessPoemException {
    Column c = _getMessageTable().getAuthorColumn();
    return new Field(c.getRaw(this), c);
  }

  public Integer getParent_unsafe() {
    return parent;
  }

  public void setParent_unsafe(Integer cooked) {
    parent = cooked;
  }

  public Integer getParentTroid()
      throws AccessPoemException {
    readLock();
    return getParent_unsafe();
  }

  public void setParentTroid(Integer raw)
      throws AccessPoemException {
    _getMessageTable().getParentColumn().getType().assertValidRaw(raw);
    writeLock();
    setParent_unsafe(raw);
  }

  public Message getParent()
      throws AccessPoemException, NoSuchRowPoemException {
    Integer troid = getParentTroid();
    return troid == null ? null :
        getBoardsDatabase().getMessageTable().getMessageObject(troid);
  }

  public void setParent(Message cooked)
      throws AccessPoemException {
    setParentTroid(cooked == null ? null : cooked.troid());
  }

  public Field getParentField() throws AccessPoemException {
    Column c = _getMessageTable().getParentColumn();
    return new Field(c.getRaw(this), c);
  }

  public String getBody_unsafe() {
    return body;
  }

  public void setBody_unsafe(String cooked) {
    body = cooked;
  }

  public String getBody()
      throws AccessPoemException {
    readLock();
    return getBody_unsafe();
  }

  public void setBody(String cooked)
      throws AccessPoemException, ValidationPoemException {
    _getMessageTable().getBodyColumn().getType().assertValidCooked(cooked);
    writeLock();
    setBody_unsafe(cooked);
  }

  public Field getBodyField() throws AccessPoemException {
    Column c = _getMessageTable().getBodyColumn();
    return new Field(c.getRaw(this), c);
  }

  public Boolean getDeleted_unsafe() {
    return deleted;
  }

  public void setDeleted_unsafe(Boolean cooked) {
    deleted = cooked;
  }

  public Boolean getDeleted()
      throws AccessPoemException {
    readLock();
    return getDeleted_unsafe();
  }

  public void setDeleted(Boolean cooked)
      throws AccessPoemException, ValidationPoemException {
    _getMessageTable().getDeletedColumn().getType().assertValidCooked(cooked);
    writeLock();
    setDeleted_unsafe(cooked);
  }

  public final void setDeleted(boolean cooked)
      throws AccessPoemException, ValidationPoemException {
    setDeleted(cooked ? Boolean.TRUE : Boolean.FALSE);
  }

  public Field getDeletedField() throws AccessPoemException {
    Column c = _getMessageTable().getDeletedColumn();
    return new Field(c.getRaw(this), c);
  }

  public Boolean getApproved_unsafe() {
    return approved;
  }

  public void setApproved_unsafe(Boolean cooked) {
    approved = cooked;
  }

  public Boolean getApproved()
      throws AccessPoemException {
    readLock();
    return getApproved_unsafe();
  }

  public void setApproved(Boolean cooked)
      throws AccessPoemException, ValidationPoemException {
    _getMessageTable().getApprovedColumn().getType().assertValidCooked(cooked);
    writeLock();
    setApproved_unsafe(cooked);
  }

  public final void setApproved(boolean cooked)
      throws AccessPoemException, ValidationPoemException {
    setApproved(cooked ? Boolean.TRUE : Boolean.FALSE);
  }

  public Field getApprovedField() throws AccessPoemException {
    Column c = _getMessageTable().getApprovedColumn();
    return new Field(c.getRaw(this), c);
  }
}
