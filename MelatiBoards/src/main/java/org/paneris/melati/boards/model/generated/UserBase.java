// Do not edit this file!  It was generated by Melati POEM's DSD preprocessor.

package org.paneris.melati.boards.model.generated;


import java.util.Collections;
import java.util.Enumeration;
import java.util.List;
import org.melati.poem.AccessPoemException;
import org.melati.poem.CachedSelection;
import org.melati.poem.Column;
import org.melati.poem.Field;
import org.melati.poem.GroupMembership;
import org.melati.poem.User;
import org.melati.poem.ValidationPoemException;
import org.melati.poem.util.EmptyEnumeration;
import org.paneris.melati.boards.model.BoardsDatabaseTables;
import org.paneris.melati.boards.model.Message;
import org.paneris.melati.boards.model.Subscription;
import org.paneris.melati.boards.model.UserTable;


/**
 * Melati POEM generated abstract base class for a <code>Persistent</code> 
 * <code>User</code> Object.
 *
 * @see org.melati.poem.prepro.TableDef#generatePersistentBaseJava 
 */
public abstract class UserBase extends User {


 /**
  * Retrieves the Database object.
  * 
  * @see org.melati.poem.prepro.TableDef#generatePersistentBaseJava 
  * @return the database
  */
  public BoardsDatabaseTables getBoardsDatabaseTables() {
    return (BoardsDatabaseTables)getDatabase();
  }


 /**
  * Retrieves the  <code>UserTable</code> table 
  * which this <code>Persistent</code> is from.
  * 
  * @see org.melati.poem.prepro.TableDef#generatePersistentBaseJava 
  * @return the org.melati.poem.UserTable
  */
  public org.melati.poem.UserTable getUserTable() {
    return (org.melati.poem.UserTable)getTable();
  }

  private UserTable _getUserTable() {
    return (UserTable)getTable();
  }

  // Fields in this table 
 /**
  * email - The user's email address 
  */
  protected String email;


 /**
  * Retrieves the <code>Email</code> value, without locking, 
  * for this <code>User</code> <code>Persistent</code>.
  *
  * @see org.melati.poem.prepro.FieldDef#generateBaseMethods 
  * @return the String email
  */
  public String getEmail_unsafe() {
    return email;
  }


 /**
  * Sets the <code>Email</code> value directly, without checking, 
  * for this User <code>Persistent</code>.
  * 
  * @see org.melati.poem.prepro.FieldDef#generateBaseMethods 
  * @param cooked  the pre-validated value to set
  */
  public void setEmail_unsafe(String cooked) {
    email = cooked;
  }

 /**
  * Retrieves the Email value, with locking, for this 
  * <code>User</code> <code>Persistent</code>.
  * Field description: 
  *   The user's email address 
  * 
  * @generator org.melati.poem.prepro.AtomFieldDef#generateBaseMethods 
  * @throws AccessPoemException 
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights 
  * @return the value of the field <code>Email</code> for this 
  *         <code>User</code> <code>Persistent</code>  
  */

  public String getEmail()
      throws AccessPoemException {
    readLock();
    return getEmail_unsafe();
  }


 /**
  * Sets the <code>Email</code> value, with checking, for this 
  * <code>User</code> <code>Persistent</code>.
  * Field description: 
  *   The user's email address 
  * 
  * @generator org.melati.poem.prepro.AtomFieldDef#generateBaseMethods  
  * @param cooked  a validated <code>int</code> 
  * @throws AccessPoemException 
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights
  * @throws ValidationPoemException 
  *         if the value is not valid
  */
  public void setEmail(String cooked)
      throws AccessPoemException, ValidationPoemException {
    _getUserTable().getEmailColumn().
      getType().assertValidCooked(cooked);
    writeLock();
    setEmail_unsafe(cooked);
  }


 /**
  * Retrieves the <code>Email</code> value as a <code>Field</code>
  * from this <code>User</code> <code>Persistent</code>.
  * 
  * @see org.melati.poem.prepro.FieldDef#generateFieldCreator 
  * @throws AccessPoemException 
  *         if the current <code>AccessToken</code> 
  *         does not confer write access rights
  * @return the String email
  */
  public Field<String> getEmailField() throws AccessPoemException {
    Column<String> c = _getUserTable().getEmailColumn();
    return new Field<String>((String)c.getRaw(this), c);
  }

  private CachedSelection<GroupMembership> userGroupMemberships = null;
  /** References to this User in the GroupMembership table via its user field.*/
  @SuppressWarnings("unchecked")
  public Enumeration<GroupMembership> getUserGroupMemberships() {
    if (getTroid() == null)
      return new EmptyEnumeration<GroupMembership>();
    else {
      if (userGroupMemberships == null)
        userGroupMemberships =
          getBoardsDatabaseTables().getGroupMembershipTable().getUserColumn().cachedSelectionWhereEq(getTroid());
      return userGroupMemberships.objects();
    }
  }


  /** References to this User in the GroupMembership table via its user field, as a List.*/
  public List<GroupMembership> getUserGroupMembershipList() {
    return Collections.list(getUserGroupMemberships());
  }



  private CachedSelection<Subscription> userSubscriptions = null;
  /** References to this User in the Subscription table via its user field.*/
  @SuppressWarnings("unchecked")
  public Enumeration<Subscription> getUserSubscriptions() {
    if (getTroid() == null)
      return new EmptyEnumeration<Subscription>();
    else {
      if (userSubscriptions == null)
        userSubscriptions =
          getBoardsDatabaseTables().getSubscriptionTable().getUserColumn().cachedSelectionWhereEq(getTroid());
      return userSubscriptions.objects();
    }
  }


  /** References to this User in the Subscription table via its user field, as a List.*/
  public List<Subscription> getUserSubscriptionList() {
    return Collections.list(getUserSubscriptions());
  }



  private CachedSelection<Message> authorMessages = null;
  /** References to this User in the Message table via its author field.*/
  @SuppressWarnings("unchecked")
  public Enumeration<Message> getAuthorMessages() {
    if (getTroid() == null)
      return new EmptyEnumeration<Message>();
    else {
      if (authorMessages == null)
        authorMessages =
          getBoardsDatabaseTables().getMessageTable().getAuthorColumn().cachedSelectionWhereEq(getTroid());
      return authorMessages.objects();
    }
  }


  /** References to this User in the Message table via its author field, as a List.*/
  public List<Message> getAuthorMessageList() {
    return Collections.list(getAuthorMessages());
  }



}

