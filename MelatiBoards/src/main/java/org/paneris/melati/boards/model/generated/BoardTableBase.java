// Do not edit this file!  It was generated by Melati POEM's DSD preprocessor.

package org.paneris.melati.boards.model.generated;

import org.melati.poem.AccessPoemException;
import org.melati.poem.BooleanPoemType;
import org.melati.poem.Column;
import org.melati.poem.Database;
import org.melati.poem.DefinitionSource;
import org.melati.poem.DisplayLevel;
import org.melati.poem.Field;
import org.melati.poem.JdbcPersistent;
import org.melati.poem.Persistent;
import org.melati.poem.PoemException;
import org.melati.poem.ReferencePoemType;
import org.melati.poem.Searchability;
import org.melati.poem.StringPoemType;
import org.melati.poem.TroidPoemType;
import org.melati.poem.ValidationPoemException;
import org.paneris.melati.boards.model.Board;
import org.paneris.melati.boards.model.BoardType;
import org.paneris.melati.boards.model.BoardsDatabaseTables;
import org.paneris.melati.boards.model.BoardsTable;


/**
 * Melati POEM generated base class for 
<code>Table</code> <code>Board</code>.
 *
 * @see org.melati.poem.prepro.TableDef#generateTableBaseJava 
 */

public class BoardTableBase extends BoardsTable {

  private Column col_id = null;
  private Column col_type = null;
  private Column col_name = null;
  private Column col_displayname = null;
  private Column col_purpose = null;
  private Column col_archived = null;
  private Column col_opensubscription = null;
  private Column col_moderatedsubscription = null;
  private Column col_openposting = null;
  private Column col_moderatedposting = null;
  private Column col_openmessageviewing = null;
  private Column col_openmemberlist = null;
  private Column col_attachmentsallowed = null;
  private Column col_anonymousposting = null;
  private Column col_attachmentspath = null;
  private Column col_attachmentsurl = null;

 /**
  * Constructor. 
  * 
  * @see org.melati.poem.prepro.TableDef#generateTableBaseJava 
  * @param database          the POEM database we are using
  * @param name              the name of this <code>Table</code>
  * @param definitionSource  which definition is being used
  * @throws PoemException    if anything goes wrong
  */

  public BoardTableBase(
      Database database, String name,
      DefinitionSource definitionSource) throws PoemException {
    super(database, name, definitionSource);
  }


 /**
  * Get the database tables.
  *
  * @see org.melati.poem.prepro.TableDef#generateTableBaseJava 
  * @return the database tables
  */
  public BoardsDatabaseTables getBoardsDatabaseTables() {
    return (BoardsDatabaseTables)getDatabase();
  }

  public void init() throws PoemException {
    super.init();
    defineColumn(col_id =
        new Column(this, "id",
                   new TroidPoemType(),
                   DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((Board)g).getId();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((Board)g).setId((Integer)cooked);
          }

          public Field asField(Persistent g) {
            return ((Board)g).getIdField();
          }

          protected boolean defaultUserEditable() {
            return false;
          }

          protected boolean defaultUserCreateable() {
            return false;
          }

          protected int defaultDisplayOrder() {
            return 0;
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((Board)g).getId_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((Board)g).setId_unsafe((Integer)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((Board)g).getId();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((Board)g).setId((Integer)raw);
          }
        });

    defineColumn(col_type =
        new Column(this, "type",
                   new ReferencePoemType(getBoardsDatabaseTables().
                                             getBoardTypeTable(), false),
                   DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((Board)g).getType();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((Board)g).setType((BoardType)cooked);
          }

          public Field asField(Persistent g) {
            return ((Board)g).getTypeField();
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.summary;
          }

          protected Searchability defaultSearchability() {
            return Searchability.primary;
          }

          protected Integer defaultDisplayOrderPriority() {
            return new Integer(0);
          }

          protected int defaultDisplayOrder() {
            return 1;
          }

          protected String defaultDescription() {
            return "The type of this messageboard";
          }

          protected boolean defaultIndexed() {
            return true;
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((Board)g).getType_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((Board)g).setType_unsafe((Integer)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((Board)g).getTypeTroid();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((Board)g).setTypeTroid((Integer)raw);
          }
        });

    defineColumn(col_name =
        new Column(this, "name",
                   new StringPoemType(false, -1),
                   DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((Board)g).getName();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((Board)g).setName((String)cooked);
          }

          public Field asField(Persistent g) {
            return ((Board)g).getNameField();
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.summary;
          }

          protected Searchability defaultSearchability() {
            return Searchability.yes;
          }

          protected Integer defaultDisplayOrderPriority() {
            return new Integer(1);
          }

          protected String defaultDisplayName() {
            return "Name";
          }

          protected int defaultDisplayOrder() {
            return 2;
          }

          protected String defaultDescription() {
            return "A code-name for this board";
          }

          protected boolean defaultUnique() {
            return true;
          }

          protected int defaultWidth() {
            return 40;
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((Board)g).getName_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((Board)g).setName_unsafe((String)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((Board)g).getName();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((Board)g).setName((String)raw);
          }
        });

    defineColumn(col_displayname =
        new Column(this, "displayname",
                   new StringPoemType(false, -1),
                   DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((Board)g).getDisplayname();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((Board)g).setDisplayname((String)cooked);
          }

          public Field asField(Persistent g) {
            return ((Board)g).getDisplaynameField();
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.primary;
          }

          protected Searchability defaultSearchability() {
            return Searchability.yes;
          }

          protected int defaultDisplayOrder() {
            return 3;
          }

          protected String defaultDescription() {
            return "A user-friendly name of this board";
          }

          protected boolean defaultUnique() {
            return true;
          }

          protected int defaultWidth() {
            return 40;
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((Board)g).getDisplayname_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((Board)g).setDisplayname_unsafe((String)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((Board)g).getDisplayname();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((Board)g).setDisplayname((String)raw);
          }
        });

    defineColumn(col_purpose =
        new Column(this, "purpose",
                   new StringPoemType(true, -1),
                   DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((Board)g).getPurpose();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((Board)g).setPurpose((String)cooked);
          }

          public Field asField(Persistent g) {
            return ((Board)g).getPurposeField();
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.record;
          }

          protected Searchability defaultSearchability() {
            return Searchability.no;
          }

          protected int defaultDisplayOrder() {
            return 4;
          }

          protected String defaultDescription() {
            return "The purpose of this message board";
          }

          protected int defaultWidth() {
            return 40;
          }

          protected int defaultHeight() {
            return 6;
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((Board)g).getPurpose_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((Board)g).setPurpose_unsafe((String)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((Board)g).getPurpose();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((Board)g).setPurpose((String)raw);
          }
        });

    defineColumn(col_archived =
        new Column(this, "archived",
                   new BooleanPoemType(false),
                   DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((Board)g).getArchived();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((Board)g).setArchived((Boolean)cooked);
          }

          public Field asField(Persistent g) {
            return ((Board)g).getArchivedField();
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.record;
          }

          protected Searchability defaultSearchability() {
            return Searchability.no;
          }

          protected int defaultDisplayOrder() {
            return 5;
          }

          protected String defaultDescription() {
            return "If a board is archived then it cannot be viewed and is not displayed on lists by default";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((Board)g).getArchived_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((Board)g).setArchived_unsafe((Boolean)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((Board)g).getArchived();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((Board)g).setArchived((Boolean)raw);
          }
        });

    defineColumn(col_opensubscription =
        new Column(this, "opensubscription",
                   new BooleanPoemType(false),
                   DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((Board)g).getOpensubscription();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((Board)g).setOpensubscription((Boolean)cooked);
          }

          public Field asField(Persistent g) {
            return ((Board)g).getOpensubscriptionField();
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.record;
          }

          protected Searchability defaultSearchability() {
            return Searchability.yes;
          }

          protected String defaultDisplayName() {
            return "Open Subscription";
          }

          protected int defaultDisplayOrder() {
            return 6;
          }

          protected String defaultDescription() {
            return "With open subscription anyone can subscribe to the board. Otherwise a board manager must subscribe members";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((Board)g).getOpensubscription_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((Board)g).setOpensubscription_unsafe((Boolean)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((Board)g).getOpensubscription();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((Board)g).setOpensubscription((Boolean)raw);
          }
        });

    defineColumn(col_moderatedsubscription =
        new Column(this, "moderatedsubscription",
                   new BooleanPoemType(false),
                   DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((Board)g).getModeratedsubscription();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((Board)g).setModeratedsubscription((Boolean)cooked);
          }

          public Field asField(Persistent g) {
            return ((Board)g).getModeratedsubscriptionField();
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.record;
          }

          protected Searchability defaultSearchability() {
            return Searchability.yes;
          }

          protected String defaultDisplayName() {
            return "Moderated Subscription";
          }

          protected int defaultDisplayOrder() {
            return 7;
          }

          protected String defaultDescription() {
            return "With moderated subscription the manager must approve all requests to be subscribed";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((Board)g).getModeratedsubscription_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((Board)g).setModeratedsubscription_unsafe((Boolean)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((Board)g).getModeratedsubscription();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((Board)g).setModeratedsubscription((Boolean)raw);
          }
        });

    defineColumn(col_openposting =
        new Column(this, "openposting",
                   new BooleanPoemType(false),
                   DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((Board)g).getOpenposting();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((Board)g).setOpenposting((Boolean)cooked);
          }

          public Field asField(Persistent g) {
            return ((Board)g).getOpenpostingField();
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.record;
          }

          protected Searchability defaultSearchability() {
            return Searchability.yes;
          }

          protected String defaultDisplayName() {
            return "Open Posting";
          }

          protected int defaultDisplayOrder() {
            return 8;
          }

          protected String defaultDescription() {
            return "With open posting anyone with a user account can post a message to this list. Otherwise, only members can post";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((Board)g).getOpenposting_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((Board)g).setOpenposting_unsafe((Boolean)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((Board)g).getOpenposting();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((Board)g).setOpenposting((Boolean)raw);
          }
        });

    defineColumn(col_moderatedposting =
        new Column(this, "moderatedposting",
                   new BooleanPoemType(false),
                   DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((Board)g).getModeratedposting();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((Board)g).setModeratedposting((Boolean)cooked);
          }

          public Field asField(Persistent g) {
            return ((Board)g).getModeratedpostingField();
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.record;
          }

          protected Searchability defaultSearchability() {
            return Searchability.yes;
          }

          protected String defaultDisplayName() {
            return "Moderated Posting";
          }

          protected int defaultDisplayOrder() {
            return 9;
          }

          protected String defaultDescription() {
            return "With moderated posting all messages must be approved by a manager";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((Board)g).getModeratedposting_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((Board)g).setModeratedposting_unsafe((Boolean)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((Board)g).getModeratedposting();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((Board)g).setModeratedposting((Boolean)raw);
          }
        });

    defineColumn(col_openmessageviewing =
        new Column(this, "openmessageviewing",
                   new BooleanPoemType(false),
                   DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((Board)g).getOpenmessageviewing();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((Board)g).setOpenmessageviewing((Boolean)cooked);
          }

          public Field asField(Persistent g) {
            return ((Board)g).getOpenmessageviewingField();
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.record;
          }

          protected Searchability defaultSearchability() {
            return Searchability.yes;
          }

          protected String defaultDisplayName() {
            return "Open Message Viewing";
          }

          protected int defaultDisplayOrder() {
            return 10;
          }

          protected String defaultDescription() {
            return "With open message viewing anyone can view messages in a board. Otherwise, only members can see messages";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((Board)g).getOpenmessageviewing_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((Board)g).setOpenmessageviewing_unsafe((Boolean)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((Board)g).getOpenmessageviewing();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((Board)g).setOpenmessageviewing((Boolean)raw);
          }
        });

    defineColumn(col_openmemberlist =
        new Column(this, "openmemberlist",
                   new BooleanPoemType(false),
                   DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((Board)g).getOpenmemberlist();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((Board)g).setOpenmemberlist((Boolean)cooked);
          }

          public Field asField(Persistent g) {
            return ((Board)g).getOpenmemberlistField();
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.record;
          }

          protected Searchability defaultSearchability() {
            return Searchability.yes;
          }

          protected String defaultDisplayName() {
            return "Open Member List";
          }

          protected int defaultDisplayOrder() {
            return 11;
          }

          protected String defaultDescription() {
            return "With open member list anyone can see the members of the list. Otherwise, only members can see who else is subscribed";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((Board)g).getOpenmemberlist_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((Board)g).setOpenmemberlist_unsafe((Boolean)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((Board)g).getOpenmemberlist();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((Board)g).setOpenmemberlist((Boolean)raw);
          }
        });

    defineColumn(col_attachmentsallowed =
        new Column(this, "attachmentsallowed",
                   new BooleanPoemType(false),
                   DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((Board)g).getAttachmentsallowed();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((Board)g).setAttachmentsallowed((Boolean)cooked);
          }

          public Field asField(Persistent g) {
            return ((Board)g).getAttachmentsallowedField();
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.record;
          }

          protected Searchability defaultSearchability() {
            return Searchability.yes;
          }

          protected String defaultDisplayName() {
            return "Attachments Allowed";
          }

          protected int defaultDisplayOrder() {
            return 12;
          }

          protected String defaultDescription() {
            return "Can attachments be sent with messages. If not, attachments are ignored";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((Board)g).getAttachmentsallowed_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((Board)g).setAttachmentsallowed_unsafe((Boolean)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((Board)g).getAttachmentsallowed();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((Board)g).setAttachmentsallowed((Boolean)raw);
          }
        });

    defineColumn(col_anonymousposting =
        new Column(this, "anonymousposting",
                   new BooleanPoemType(false),
                   DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((Board)g).getAnonymousposting();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((Board)g).setAnonymousposting((Boolean)cooked);
          }

          public Field asField(Persistent g) {
            return ((Board)g).getAnonymouspostingField();
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.record;
          }

          protected Searchability defaultSearchability() {
            return Searchability.yes;
          }

          protected String defaultDisplayName() {
            return "Anonymous Posting Allowed";
          }

          protected int defaultDisplayOrder() {
            return 13;
          }

          protected String defaultDescription() {
            return "Can people without user accounts post to this messageboard. If so, a user account is created for them when they post.";
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((Board)g).getAnonymousposting_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((Board)g).setAnonymousposting_unsafe((Boolean)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((Board)g).getAnonymousposting();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((Board)g).setAnonymousposting((Boolean)raw);
          }
        });

    defineColumn(col_attachmentspath =
        new Column(this, "attachmentspath",
                   new StringPoemType(false, -1),
                   DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((Board)g).getAttachmentspath();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((Board)g).setAttachmentspath((String)cooked);
          }

          public Field asField(Persistent g) {
            return ((Board)g).getAttachmentspathField();
          }

          protected boolean defaultUserCreateable() {
            return false;
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.record;
          }

          protected Searchability defaultSearchability() {
            return Searchability.yes;
          }

          protected String defaultDisplayName() {
            return "Attachments Path";
          }

          protected int defaultDisplayOrder() {
            return 14;
          }

          protected String defaultDescription() {
            return "A path to the directory containing attachments for this board";
          }

          protected int defaultWidth() {
            return 70;
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((Board)g).getAttachmentspath_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((Board)g).setAttachmentspath_unsafe((String)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((Board)g).getAttachmentspath();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((Board)g).setAttachmentspath((String)raw);
          }
        });

    defineColumn(col_attachmentsurl =
        new Column(this, "attachmentsurl",
                   new StringPoemType(false, -1),
                   DefinitionSource.dsd) { 
          public Object getCooked(Persistent g)
              throws AccessPoemException, PoemException {
            return ((Board)g).getAttachmentsurl();
          }

          public void setCooked(Persistent g, Object cooked)
              throws AccessPoemException, ValidationPoemException {
            ((Board)g).setAttachmentsurl((String)cooked);
          }

          public Field asField(Persistent g) {
            return ((Board)g).getAttachmentsurlField();
          }

          protected boolean defaultUserCreateable() {
            return false;
          }

          protected DisplayLevel defaultDisplayLevel() {
            return DisplayLevel.record;
          }

          protected Searchability defaultSearchability() {
            return Searchability.yes;
          }

          protected String defaultDisplayName() {
            return "Attachments URL";
          }

          protected int defaultDisplayOrder() {
            return 15;
          }

          protected String defaultDescription() {
            return "A URL to the directory containing attachments for this board";
          }

          protected int defaultWidth() {
            return 70;
          }

          public Object getRaw_unsafe(Persistent g)
              throws AccessPoemException {
            return ((Board)g).getAttachmentsurl_unsafe();
          }

          public void setRaw_unsafe(Persistent g, Object raw)
              throws AccessPoemException {
            ((Board)g).setAttachmentsurl_unsafe((String)raw);
          }

          public Object getRaw(Persistent g)
              throws AccessPoemException {
            return ((Board)g).getAttachmentsurl();
          }

          public void setRaw(Persistent g, Object raw)
              throws AccessPoemException {
            ((Board)g).setAttachmentsurl((String)raw);
          }
        });
  }


 /**
  * Retrieves the <code>Id</code> <code>Column</code> for this 
  * <code>Board</code> <code>Table</code>.
  * 
  * @see org.melati.poem.prepro.FieldDef#generateColAccessor 
  * @return the id <code>Column</code>
  */
  public final Column getIdColumn() {
    return col_id;
  }


 /**
  * Retrieves the <code>Type</code> <code>Column</code> for this 
  * <code>Board</code> <code>Table</code>.
  * 
  * @see org.melati.poem.prepro.FieldDef#generateColAccessor 
  * @return the type <code>Column</code>
  */
  public final Column getTypeColumn() {
    return col_type;
  }


 /**
  * Retrieves the <code>Name</code> <code>Column</code> for this 
  * <code>Board</code> <code>Table</code>.
  * 
  * @see org.melati.poem.prepro.FieldDef#generateColAccessor 
  * @return the name <code>Column</code>
  */
  public final Column getNameColumn() {
    return col_name;
  }


 /**
  * Retrieves the <code>Displayname</code> <code>Column</code> for this 
  * <code>Board</code> <code>Table</code>.
  * 
  * @see org.melati.poem.prepro.FieldDef#generateColAccessor 
  * @return the displayname <code>Column</code>
  */
  public final Column getDisplaynameColumn() {
    return col_displayname;
  }


 /**
  * Retrieves the <code>Purpose</code> <code>Column</code> for this 
  * <code>Board</code> <code>Table</code>.
  * 
  * @see org.melati.poem.prepro.FieldDef#generateColAccessor 
  * @return the purpose <code>Column</code>
  */
  public final Column getPurposeColumn() {
    return col_purpose;
  }


 /**
  * Retrieves the <code>Archived</code> <code>Column</code> for this 
  * <code>Board</code> <code>Table</code>.
  * 
  * @see org.melati.poem.prepro.FieldDef#generateColAccessor 
  * @return the archived <code>Column</code>
  */
  public final Column getArchivedColumn() {
    return col_archived;
  }


 /**
  * Retrieves the <code>Opensubscription</code> <code>Column</code> for this 
  * <code>Board</code> <code>Table</code>.
  * 
  * @see org.melati.poem.prepro.FieldDef#generateColAccessor 
  * @return the opensubscription <code>Column</code>
  */
  public final Column getOpensubscriptionColumn() {
    return col_opensubscription;
  }


 /**
  * Retrieves the <code>Moderatedsubscription</code> <code>Column</code> for this 
  * <code>Board</code> <code>Table</code>.
  * 
  * @see org.melati.poem.prepro.FieldDef#generateColAccessor 
  * @return the moderatedsubscription <code>Column</code>
  */
  public final Column getModeratedsubscriptionColumn() {
    return col_moderatedsubscription;
  }


 /**
  * Retrieves the <code>Openposting</code> <code>Column</code> for this 
  * <code>Board</code> <code>Table</code>.
  * 
  * @see org.melati.poem.prepro.FieldDef#generateColAccessor 
  * @return the openposting <code>Column</code>
  */
  public final Column getOpenpostingColumn() {
    return col_openposting;
  }


 /**
  * Retrieves the <code>Moderatedposting</code> <code>Column</code> for this 
  * <code>Board</code> <code>Table</code>.
  * 
  * @see org.melati.poem.prepro.FieldDef#generateColAccessor 
  * @return the moderatedposting <code>Column</code>
  */
  public final Column getModeratedpostingColumn() {
    return col_moderatedposting;
  }


 /**
  * Retrieves the <code>Openmessageviewing</code> <code>Column</code> for this 
  * <code>Board</code> <code>Table</code>.
  * 
  * @see org.melati.poem.prepro.FieldDef#generateColAccessor 
  * @return the openmessageviewing <code>Column</code>
  */
  public final Column getOpenmessageviewingColumn() {
    return col_openmessageviewing;
  }


 /**
  * Retrieves the <code>Openmemberlist</code> <code>Column</code> for this 
  * <code>Board</code> <code>Table</code>.
  * 
  * @see org.melati.poem.prepro.FieldDef#generateColAccessor 
  * @return the openmemberlist <code>Column</code>
  */
  public final Column getOpenmemberlistColumn() {
    return col_openmemberlist;
  }


 /**
  * Retrieves the <code>Attachmentsallowed</code> <code>Column</code> for this 
  * <code>Board</code> <code>Table</code>.
  * 
  * @see org.melati.poem.prepro.FieldDef#generateColAccessor 
  * @return the attachmentsallowed <code>Column</code>
  */
  public final Column getAttachmentsallowedColumn() {
    return col_attachmentsallowed;
  }


 /**
  * Retrieves the <code>Anonymousposting</code> <code>Column</code> for this 
  * <code>Board</code> <code>Table</code>.
  * 
  * @see org.melati.poem.prepro.FieldDef#generateColAccessor 
  * @return the anonymousposting <code>Column</code>
  */
  public final Column getAnonymouspostingColumn() {
    return col_anonymousposting;
  }


 /**
  * Retrieves the <code>Attachmentspath</code> <code>Column</code> for this 
  * <code>Board</code> <code>Table</code>.
  * 
  * @see org.melati.poem.prepro.FieldDef#generateColAccessor 
  * @return the attachmentspath <code>Column</code>
  */
  public final Column getAttachmentspathColumn() {
    return col_attachmentspath;
  }


 /**
  * Retrieves the <code>Attachmentsurl</code> <code>Column</code> for this 
  * <code>Board</code> <code>Table</code>.
  * 
  * @see org.melati.poem.prepro.FieldDef#generateColAccessor 
  * @return the attachmentsurl <code>Column</code>
  */
  public final Column getAttachmentsurlColumn() {
    return col_attachmentsurl;
  }


 /**
  * Retrieve the <code>Board</code> as a <code>Board</code>.
  *
  * @see org.melati.poem.prepro.TableDef#generateTableBaseJava 
  * @param troid a Table Row Oject ID
  * @return the <code>Persistent</code> identified by the <code>troid</code>
  */
  public Board getBoardObject(Integer troid) {
    return (Board)getObject(troid);
  }


 /**
  * Retrieve the <code>Board</code> 
  * as a <code>Board</code>.
  *
  * @see org.melati.poem.prepro.TableDef#generateTableBaseJava 
  * @param troid a Table Row Object ID
  * @return the <code>Persistent</code> identified   */
  public Board getBoardObject(int troid) {
    return (Board)getObject(troid);
  }

  protected JdbcPersistent _newPersistent() {
    return new Board();
  }
  protected String defaultDisplayName() {
    return "Board";
  }

  protected String defaultDescription() {
    return "A board for messages";
  }

  protected boolean defaultRememberAllTroids() {
    return true;
  }

  protected Integer defaultCacheLimit() {
    return new Integer(2000);
  }

  protected String defaultCategory() {
    return "Boards";
  }

  protected int defaultDisplayOrder() {
    return 1020;
  }
}

