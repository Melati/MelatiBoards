// Do not edit this file!  It was generated by Melati POEM's DSD preprocessor.

package org.paneris.melati.boards.model.generated;


import org.melati.poem.AccessPoemException;
import org.melati.poem.Column;
import org.melati.poem.Field;
import org.melati.poem.NoSuchRowPoemException;
import org.melati.poem.Persistent;
import org.melati.poem.ValidationPoemException;
import org.paneris.melati.boards.model.Board;
import org.paneris.melati.boards.model.BoardsDatabaseTables;
import org.paneris.melati.boards.model.MembershipStatus;
import org.paneris.melati.boards.model.SubscriptionTable;
import org.paneris.melati.boards.model.User;


/**
 * Melati POEM generated base class for persistent Subscription.
 * Field summary for SQL table subscription:
 *   id
 *   user
 *   board
 *   status
 *   ismanager
 *   approved
 *
 */
public abstract class SubscriptionBase extends Persistent {

  public BoardsDatabaseTables getBoardsDatabaseTables() {
    return (BoardsDatabaseTables)getDatabase();
  }

  public SubscriptionTable getSubscriptionTable() {
    return (SubscriptionTable)getTable();
  }

  private SubscriptionTable _getSubscriptionTable() {
    return (SubscriptionTable)getTable();
  }

  protected Integer id;
  protected Integer user;
  protected Integer board;
  protected Integer status;
  protected Boolean ismanager;
  protected Boolean approved;

  public Integer getId_unsafe() {
    return id;
  }

  public void setId_unsafe(Integer cooked) {
    id = cooked;
  }

  public Integer getId()
      throws AccessPoemException {
    readLock();
    return getId_unsafe();
  }

  public void setId(Integer cooked)
      throws AccessPoemException, ValidationPoemException {
    _getSubscriptionTable().getIdColumn().getType().assertValidCooked(cooked);
    writeLock();
    setId_unsafe(cooked);
  }

  public final void setId(int cooked)
      throws AccessPoemException, ValidationPoemException {
    setId(new Integer(cooked));
  }

  public Field getIdField() throws AccessPoemException {
    Column c = _getSubscriptionTable().getIdColumn();
    return new Field(c.getRaw(this), c);
  }

  public Integer getUser_unsafe() {
    return user;
  }

  public void setUser_unsafe(Integer cooked) {
    user = cooked;
  }

  public Integer getUserTroid()
      throws AccessPoemException {
    readLock();
    return getUser_unsafe();
  }

  public void setUserTroid(Integer raw)
      throws AccessPoemException {
    setUser(raw == null ? null : 
        (User)getBoardsDatabaseTables().getUserTable().getUserObject(raw));
  }

  public User getUser()
      throws AccessPoemException, NoSuchRowPoemException {
    Integer troid = getUserTroid();
    return troid == null ? null :
        (User)getBoardsDatabaseTables().getUserTable().getUserObject(troid);
  }

  public void setUser(User cooked)
      throws AccessPoemException {
    _getSubscriptionTable().getUserColumn().getType().assertValidCooked(cooked);
    writeLock();
    if (cooked == null)
      setUser_unsafe(null);
    else {
      cooked.existenceLock();
      setUser_unsafe(cooked.troid());
    }
  }

  public Field getUserField() throws AccessPoemException {
    Column c = _getSubscriptionTable().getUserColumn();
    return new Field(c.getRaw(this), c);
  }

  public Integer getBoard_unsafe() {
    return board;
  }

  public void setBoard_unsafe(Integer cooked) {
    board = cooked;
  }

  public Integer getBoardTroid()
      throws AccessPoemException {
    readLock();
    return getBoard_unsafe();
  }

  public void setBoardTroid(Integer raw)
      throws AccessPoemException {
    setBoard(raw == null ? null : 
        getBoardsDatabaseTables().getBoardTable().getBoardObject(raw));
  }

  public Board getBoard()
      throws AccessPoemException, NoSuchRowPoemException {
    Integer troid = getBoardTroid();
    return troid == null ? null :
        getBoardsDatabaseTables().getBoardTable().getBoardObject(troid);
  }

  public void setBoard(Board cooked)
      throws AccessPoemException {
    _getSubscriptionTable().getBoardColumn().getType().assertValidCooked(cooked);
    writeLock();
    if (cooked == null)
      setBoard_unsafe(null);
    else {
      cooked.existenceLock();
      setBoard_unsafe(cooked.troid());
    }
  }

  public Field getBoardField() throws AccessPoemException {
    Column c = _getSubscriptionTable().getBoardColumn();
    return new Field(c.getRaw(this), c);
  }

  public Integer getStatus_unsafe() {
    return status;
  }

  public void setStatus_unsafe(Integer cooked) {
    status = cooked;
  }

  public Integer getStatusTroid()
      throws AccessPoemException {
    readLock();
    return getStatus_unsafe();
  }

  public void setStatusTroid(Integer raw)
      throws AccessPoemException {
    setStatus(raw == null ? null : 
        getBoardsDatabaseTables().getMembershipStatusTable().getMembershipStatusObject(raw));
  }

  public MembershipStatus getStatus()
      throws AccessPoemException, NoSuchRowPoemException {
    Integer troid = getStatusTroid();
    return troid == null ? null :
        getBoardsDatabaseTables().getMembershipStatusTable().getMembershipStatusObject(troid);
  }

  public void setStatus(MembershipStatus cooked)
      throws AccessPoemException {
    _getSubscriptionTable().getStatusColumn().getType().assertValidCooked(cooked);
    writeLock();
    if (cooked == null)
      setStatus_unsafe(null);
    else {
      cooked.existenceLock();
      setStatus_unsafe(cooked.troid());
    }
  }

  public Field getStatusField() throws AccessPoemException {
    Column c = _getSubscriptionTable().getStatusColumn();
    return new Field(c.getRaw(this), c);
  }

  public Boolean getIsmanager_unsafe() {
    return ismanager;
  }

  public void setIsmanager_unsafe(Boolean cooked) {
    ismanager = cooked;
  }

  public Boolean getIsmanager()
      throws AccessPoemException {
    readLock();
    return getIsmanager_unsafe();
  }

  public void setIsmanager(Boolean cooked)
      throws AccessPoemException, ValidationPoemException {
    _getSubscriptionTable().getIsmanagerColumn().getType().assertValidCooked(cooked);
    writeLock();
    setIsmanager_unsafe(cooked);
  }

  public final void setIsmanager(boolean cooked)
      throws AccessPoemException, ValidationPoemException {
    setIsmanager(cooked ? Boolean.TRUE : Boolean.FALSE);
  }

  public Field getIsmanagerField() throws AccessPoemException {
    Column c = _getSubscriptionTable().getIsmanagerColumn();
    return new Field(c.getRaw(this), c);
  }

  public Boolean getApproved_unsafe() {
    return approved;
  }

  public void setApproved_unsafe(Boolean cooked) {
    approved = cooked;
  }

  public Boolean getApproved()
      throws AccessPoemException {
    readLock();
    return getApproved_unsafe();
  }

  public void setApproved(Boolean cooked)
      throws AccessPoemException, ValidationPoemException {
    _getSubscriptionTable().getApprovedColumn().getType().assertValidCooked(cooked);
    writeLock();
    setApproved_unsafe(cooked);
  }

  public final void setApproved(boolean cooked)
      throws AccessPoemException, ValidationPoemException {
    setApproved(cooked ? Boolean.TRUE : Boolean.FALSE);
  }

  public Field getApprovedField() throws AccessPoemException {
    Column c = _getSubscriptionTable().getApprovedColumn();
    return new Field(c.getRaw(this), c);
  }
}
