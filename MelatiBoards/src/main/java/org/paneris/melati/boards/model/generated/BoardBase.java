// Do not edit this file!  It was generated by Melati POEM's DSD preprocessor.

package org.paneris.melati.boards.model.generated;


import org.melati.poem.Column;
import org.melati.poem.Field;
import org.melati.poem.Persistent;
import org.melati.poem.AccessPoemException;
import org.melati.poem.ValidationPoemException;

import org.paneris.melati.boards.model.BoardType;
import org.melati.poem.NoSuchRowPoemException;

import org.paneris.melati.boards.model.BoardTable;
import org.paneris.melati.boards.model.BoardsDatabaseTables;

/**
 * Melati POEM generated base class for persistent Board.
 * Field summary for SQL table board:
 *   id
 *   type
 *   name
 *   displayname
 *   purpose
 *   archived
 *   opensubscription
 *   moderatedsubscription
 *   openposting
 *   moderatedposting
 *   openmessageviewing
 *   openmemberlist
 *   attachmentsallowed
 *   anonymousposting
 *   attachmentspath
 *   attachmentsurl
 *
 */
public abstract class BoardBase extends Persistent {

  public BoardsDatabaseTables getBoardsDatabaseTables() {
    return (BoardsDatabaseTables)getDatabase();
  }

  public BoardTable getBoardTable() {
    return (BoardTable)getTable();
  }

  private BoardTable _getBoardTable() {
    return (BoardTable)getTable();
  }

  protected Integer id;
  protected Integer type;
  protected String name;
  protected String displayname;
  protected String purpose;
  protected Boolean archived;
  protected Boolean opensubscription;
  protected Boolean moderatedsubscription;
  protected Boolean openposting;
  protected Boolean moderatedposting;
  protected Boolean openmessageviewing;
  protected Boolean openmemberlist;
  protected Boolean attachmentsallowed;
  protected Boolean anonymousposting;
  protected String attachmentspath;
  protected String attachmentsurl;

  public Integer getId_unsafe() {
    return id;
  }

  public void setId_unsafe(Integer cooked) {
    id = cooked;
  }

  public Integer getId()
      throws AccessPoemException {
    readLock();
    return getId_unsafe();
  }

  public void setId(Integer cooked)
      throws AccessPoemException, ValidationPoemException {
    _getBoardTable().getIdColumn().getType().assertValidCooked(cooked);
    writeLock();
    setId_unsafe(cooked);
  }

  public final void setId(int cooked)
      throws AccessPoemException, ValidationPoemException {
    setId(new Integer(cooked));
  }

  public Field getIdField() throws AccessPoemException {
    Column c = _getBoardTable().getIdColumn();
    return new Field(c.getRaw(this), c);
  }

  public Integer getType_unsafe() {
    return type;
  }

  public void setType_unsafe(Integer cooked) {
    type = cooked;
  }

  public Integer getTypeTroid()
      throws AccessPoemException {
    readLock();
    return getType_unsafe();
  }

  public void setTypeTroid(Integer raw)
      throws AccessPoemException {
    setType(raw == null ? null : 
        getBoardsDatabaseTables().getBoardTypeTable().getBoardTypeObject(raw));
  }

  public BoardType getType()
      throws AccessPoemException, NoSuchRowPoemException {
    Integer troid = getTypeTroid();
    return troid == null ? null :
        getBoardsDatabaseTables().getBoardTypeTable().getBoardTypeObject(troid);
  }

  public void setType(BoardType cooked)
      throws AccessPoemException {
    _getBoardTable().getTypeColumn().getType().assertValidCooked(cooked);
    writeLock();
    if (cooked == null)
      setType_unsafe(null);
    else {
      cooked.existenceLock();
      setType_unsafe(cooked.troid());
    }
  }

  public Field getTypeField() throws AccessPoemException {
    Column c = _getBoardTable().getTypeColumn();
    return new Field(c.getRaw(this), c);
  }

  public String getName_unsafe() {
    return name;
  }

  public void setName_unsafe(String cooked) {
    name = cooked;
  }

  public String getName()
      throws AccessPoemException {
    readLock();
    return getName_unsafe();
  }

  public void setName(String cooked)
      throws AccessPoemException, ValidationPoemException {
    _getBoardTable().getNameColumn().getType().assertValidCooked(cooked);
    writeLock();
    setName_unsafe(cooked);
  }

  public Field getNameField() throws AccessPoemException {
    Column c = _getBoardTable().getNameColumn();
    return new Field(c.getRaw(this), c);
  }

  public String getDisplayname_unsafe() {
    return displayname;
  }

  public void setDisplayname_unsafe(String cooked) {
    displayname = cooked;
  }

  public String getDisplayname()
      throws AccessPoemException {
    readLock();
    return getDisplayname_unsafe();
  }

  public void setDisplayname(String cooked)
      throws AccessPoemException, ValidationPoemException {
    _getBoardTable().getDisplaynameColumn().getType().assertValidCooked(cooked);
    writeLock();
    setDisplayname_unsafe(cooked);
  }

  public Field getDisplaynameField() throws AccessPoemException {
    Column c = _getBoardTable().getDisplaynameColumn();
    return new Field(c.getRaw(this), c);
  }

  public String getPurpose_unsafe() {
    return purpose;
  }

  public void setPurpose_unsafe(String cooked) {
    purpose = cooked;
  }

  public String getPurpose()
      throws AccessPoemException {
    readLock();
    return getPurpose_unsafe();
  }

  public void setPurpose(String cooked)
      throws AccessPoemException, ValidationPoemException {
    _getBoardTable().getPurposeColumn().getType().assertValidCooked(cooked);
    writeLock();
    setPurpose_unsafe(cooked);
  }

  public Field getPurposeField() throws AccessPoemException {
    Column c = _getBoardTable().getPurposeColumn();
    return new Field(c.getRaw(this), c);
  }

  public Boolean getArchived_unsafe() {
    return archived;
  }

  public void setArchived_unsafe(Boolean cooked) {
    archived = cooked;
  }

  public Boolean getArchived()
      throws AccessPoemException {
    readLock();
    return getArchived_unsafe();
  }

  public void setArchived(Boolean cooked)
      throws AccessPoemException, ValidationPoemException {
    _getBoardTable().getArchivedColumn().getType().assertValidCooked(cooked);
    writeLock();
    setArchived_unsafe(cooked);
  }

  public final void setArchived(boolean cooked)
      throws AccessPoemException, ValidationPoemException {
    setArchived(cooked ? Boolean.TRUE : Boolean.FALSE);
  }

  public Field getArchivedField() throws AccessPoemException {
    Column c = _getBoardTable().getArchivedColumn();
    return new Field(c.getRaw(this), c);
  }

  public Boolean getOpensubscription_unsafe() {
    return opensubscription;
  }

  public void setOpensubscription_unsafe(Boolean cooked) {
    opensubscription = cooked;
  }

  public Boolean getOpensubscription()
      throws AccessPoemException {
    readLock();
    return getOpensubscription_unsafe();
  }

  public void setOpensubscription(Boolean cooked)
      throws AccessPoemException, ValidationPoemException {
    _getBoardTable().getOpensubscriptionColumn().getType().assertValidCooked(cooked);
    writeLock();
    setOpensubscription_unsafe(cooked);
  }

  public final void setOpensubscription(boolean cooked)
      throws AccessPoemException, ValidationPoemException {
    setOpensubscription(cooked ? Boolean.TRUE : Boolean.FALSE);
  }

  public Field getOpensubscriptionField() throws AccessPoemException {
    Column c = _getBoardTable().getOpensubscriptionColumn();
    return new Field(c.getRaw(this), c);
  }

  public Boolean getModeratedsubscription_unsafe() {
    return moderatedsubscription;
  }

  public void setModeratedsubscription_unsafe(Boolean cooked) {
    moderatedsubscription = cooked;
  }

  public Boolean getModeratedsubscription()
      throws AccessPoemException {
    readLock();
    return getModeratedsubscription_unsafe();
  }

  public void setModeratedsubscription(Boolean cooked)
      throws AccessPoemException, ValidationPoemException {
    _getBoardTable().getModeratedsubscriptionColumn().getType().assertValidCooked(cooked);
    writeLock();
    setModeratedsubscription_unsafe(cooked);
  }

  public final void setModeratedsubscription(boolean cooked)
      throws AccessPoemException, ValidationPoemException {
    setModeratedsubscription(cooked ? Boolean.TRUE : Boolean.FALSE);
  }

  public Field getModeratedsubscriptionField() throws AccessPoemException {
    Column c = _getBoardTable().getModeratedsubscriptionColumn();
    return new Field(c.getRaw(this), c);
  }

  public Boolean getOpenposting_unsafe() {
    return openposting;
  }

  public void setOpenposting_unsafe(Boolean cooked) {
    openposting = cooked;
  }

  public Boolean getOpenposting()
      throws AccessPoemException {
    readLock();
    return getOpenposting_unsafe();
  }

  public void setOpenposting(Boolean cooked)
      throws AccessPoemException, ValidationPoemException {
    _getBoardTable().getOpenpostingColumn().getType().assertValidCooked(cooked);
    writeLock();
    setOpenposting_unsafe(cooked);
  }

  public final void setOpenposting(boolean cooked)
      throws AccessPoemException, ValidationPoemException {
    setOpenposting(cooked ? Boolean.TRUE : Boolean.FALSE);
  }

  public Field getOpenpostingField() throws AccessPoemException {
    Column c = _getBoardTable().getOpenpostingColumn();
    return new Field(c.getRaw(this), c);
  }

  public Boolean getModeratedposting_unsafe() {
    return moderatedposting;
  }

  public void setModeratedposting_unsafe(Boolean cooked) {
    moderatedposting = cooked;
  }

  public Boolean getModeratedposting()
      throws AccessPoemException {
    readLock();
    return getModeratedposting_unsafe();
  }

  public void setModeratedposting(Boolean cooked)
      throws AccessPoemException, ValidationPoemException {
    _getBoardTable().getModeratedpostingColumn().getType().assertValidCooked(cooked);
    writeLock();
    setModeratedposting_unsafe(cooked);
  }

  public final void setModeratedposting(boolean cooked)
      throws AccessPoemException, ValidationPoemException {
    setModeratedposting(cooked ? Boolean.TRUE : Boolean.FALSE);
  }

  public Field getModeratedpostingField() throws AccessPoemException {
    Column c = _getBoardTable().getModeratedpostingColumn();
    return new Field(c.getRaw(this), c);
  }

  public Boolean getOpenmessageviewing_unsafe() {
    return openmessageviewing;
  }

  public void setOpenmessageviewing_unsafe(Boolean cooked) {
    openmessageviewing = cooked;
  }

  public Boolean getOpenmessageviewing()
      throws AccessPoemException {
    readLock();
    return getOpenmessageviewing_unsafe();
  }

  public void setOpenmessageviewing(Boolean cooked)
      throws AccessPoemException, ValidationPoemException {
    _getBoardTable().getOpenmessageviewingColumn().getType().assertValidCooked(cooked);
    writeLock();
    setOpenmessageviewing_unsafe(cooked);
  }

  public final void setOpenmessageviewing(boolean cooked)
      throws AccessPoemException, ValidationPoemException {
    setOpenmessageviewing(cooked ? Boolean.TRUE : Boolean.FALSE);
  }

  public Field getOpenmessageviewingField() throws AccessPoemException {
    Column c = _getBoardTable().getOpenmessageviewingColumn();
    return new Field(c.getRaw(this), c);
  }

  public Boolean getOpenmemberlist_unsafe() {
    return openmemberlist;
  }

  public void setOpenmemberlist_unsafe(Boolean cooked) {
    openmemberlist = cooked;
  }

  public Boolean getOpenmemberlist()
      throws AccessPoemException {
    readLock();
    return getOpenmemberlist_unsafe();
  }

  public void setOpenmemberlist(Boolean cooked)
      throws AccessPoemException, ValidationPoemException {
    _getBoardTable().getOpenmemberlistColumn().getType().assertValidCooked(cooked);
    writeLock();
    setOpenmemberlist_unsafe(cooked);
  }

  public final void setOpenmemberlist(boolean cooked)
      throws AccessPoemException, ValidationPoemException {
    setOpenmemberlist(cooked ? Boolean.TRUE : Boolean.FALSE);
  }

  public Field getOpenmemberlistField() throws AccessPoemException {
    Column c = _getBoardTable().getOpenmemberlistColumn();
    return new Field(c.getRaw(this), c);
  }

  public Boolean getAttachmentsallowed_unsafe() {
    return attachmentsallowed;
  }

  public void setAttachmentsallowed_unsafe(Boolean cooked) {
    attachmentsallowed = cooked;
  }

  public Boolean getAttachmentsallowed()
      throws AccessPoemException {
    readLock();
    return getAttachmentsallowed_unsafe();
  }

  public void setAttachmentsallowed(Boolean cooked)
      throws AccessPoemException, ValidationPoemException {
    _getBoardTable().getAttachmentsallowedColumn().getType().assertValidCooked(cooked);
    writeLock();
    setAttachmentsallowed_unsafe(cooked);
  }

  public final void setAttachmentsallowed(boolean cooked)
      throws AccessPoemException, ValidationPoemException {
    setAttachmentsallowed(cooked ? Boolean.TRUE : Boolean.FALSE);
  }

  public Field getAttachmentsallowedField() throws AccessPoemException {
    Column c = _getBoardTable().getAttachmentsallowedColumn();
    return new Field(c.getRaw(this), c);
  }

  public Boolean getAnonymousposting_unsafe() {
    return anonymousposting;
  }

  public void setAnonymousposting_unsafe(Boolean cooked) {
    anonymousposting = cooked;
  }

  public Boolean getAnonymousposting()
      throws AccessPoemException {
    readLock();
    return getAnonymousposting_unsafe();
  }

  public void setAnonymousposting(Boolean cooked)
      throws AccessPoemException, ValidationPoemException {
    _getBoardTable().getAnonymouspostingColumn().getType().assertValidCooked(cooked);
    writeLock();
    setAnonymousposting_unsafe(cooked);
  }

  public final void setAnonymousposting(boolean cooked)
      throws AccessPoemException, ValidationPoemException {
    setAnonymousposting(cooked ? Boolean.TRUE : Boolean.FALSE);
  }

  public Field getAnonymouspostingField() throws AccessPoemException {
    Column c = _getBoardTable().getAnonymouspostingColumn();
    return new Field(c.getRaw(this), c);
  }

  public String getAttachmentspath_unsafe() {
    return attachmentspath;
  }

  public void setAttachmentspath_unsafe(String cooked) {
    attachmentspath = cooked;
  }

  public String getAttachmentspath()
      throws AccessPoemException {
    readLock();
    return getAttachmentspath_unsafe();
  }

  public void setAttachmentspath(String cooked)
      throws AccessPoemException, ValidationPoemException {
    _getBoardTable().getAttachmentspathColumn().getType().assertValidCooked(cooked);
    writeLock();
    setAttachmentspath_unsafe(cooked);
  }

  public Field getAttachmentspathField() throws AccessPoemException {
    Column c = _getBoardTable().getAttachmentspathColumn();
    return new Field(c.getRaw(this), c);
  }

  public String getAttachmentsurl_unsafe() {
    return attachmentsurl;
  }

  public void setAttachmentsurl_unsafe(String cooked) {
    attachmentsurl = cooked;
  }

  public String getAttachmentsurl()
      throws AccessPoemException {
    readLock();
    return getAttachmentsurl_unsafe();
  }

  public void setAttachmentsurl(String cooked)
      throws AccessPoemException, ValidationPoemException {
    _getBoardTable().getAttachmentsurlColumn().getType().assertValidCooked(cooked);
    writeLock();
    setAttachmentsurl_unsafe(cooked);
  }

  public Field getAttachmentsurlField() throws AccessPoemException {
    Column c = _getBoardTable().getAttachmentsurlColumn();
    return new Field(c.getRaw(this), c);
  }
}
