// Do not edit this file!  It was generated by Melati POEM's DSD preprocessor.

package org.paneris.melati.boards.model.generated;

import org.paneris.melati.boards.model.User;
import org.paneris.melati.boards.model.UserTable;
import org.paneris.melati.boards.model.Setting;
import org.paneris.melati.boards.model.SettingTable;
import org.paneris.melati.boards.model.*;
import java.util.*;
import java.sql.Date;
import java.sql.Timestamp;
import org.melati.poem.*;

public abstract class BoardTypeBase extends Persistent {

  public BoardsDatabaseTables getBoardsDatabaseTables() {
    return (BoardsDatabaseTables)getDatabase();
  }

  public BoardTypeTable getBoardTypeTable() {
    return (BoardTypeTable)getTable();
  }

  private BoardTypeTable _getBoardTypeTable() {
    return (BoardTypeTable)getTable();
  }

  protected Integer id;
  protected String type;
  protected String description;

  public Integer getId_unsafe() {
    return id;
  }

  public void setId_unsafe(Integer cooked) {
    id = cooked;
  }

  public Integer getId()
      throws AccessPoemException {
    readLock();
    return getId_unsafe();
  }

  public void setId(Integer cooked)
      throws AccessPoemException, ValidationPoemException {
    _getBoardTypeTable().getIdColumn().getType().assertValidCooked(cooked);
    writeLock();
    setId_unsafe(cooked);
  }

  public final void setId(int cooked)
      throws AccessPoemException, ValidationPoemException {
    setId(new Integer(cooked));
  }

  public Field getIdField() throws AccessPoemException {
    Column c = _getBoardTypeTable().getIdColumn();
    return new Field(c.getRaw(this), c);
  }

  public String getType_unsafe() {
    return type;
  }

  public void setType_unsafe(String cooked) {
    type = cooked;
  }

  public String getType()
      throws AccessPoemException {
    readLock();
    return getType_unsafe();
  }

  public void setType(String cooked)
      throws AccessPoemException, ValidationPoemException {
    _getBoardTypeTable().getTypeColumn().getType().assertValidCooked(cooked);
    writeLock();
    setType_unsafe(cooked);
  }

  public Field getTypeField() throws AccessPoemException {
    Column c = _getBoardTypeTable().getTypeColumn();
    return new Field(c.getRaw(this), c);
  }

  public String getDescription_unsafe() {
    return description;
  }

  public void setDescription_unsafe(String cooked) {
    description = cooked;
  }

  public String getDescription()
      throws AccessPoemException {
    readLock();
    return getDescription_unsafe();
  }

  public void setDescription(String cooked)
      throws AccessPoemException, ValidationPoemException {
    _getBoardTypeTable().getDescriptionColumn().getType().assertValidCooked(cooked);
    writeLock();
    setDescription_unsafe(cooked);
  }

  public Field getDescriptionField() throws AccessPoemException {
    Column c = _getBoardTypeTable().getDescriptionColumn();
    return new Field(c.getRaw(this), c);
  }
}
