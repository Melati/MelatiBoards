###############################################################################
#                        Servlet Zone Configuration File                      #
###############################################################################

################################ W A R N I N G ################################
#
# Unlike normal Java properties, JServ configurations have some important 
# extentions:
#
#    1) commas are used as token separators
#    2) multiple definitions of the same key are concatenated in a 
#       comma-separated list.
#
###############################################################################

# List of Repositories
#######################

# The list of servlet repositories controlled by this servlet zone
# Syntax: repositories=[repository],[repository]...
# Default: NONE
# Note: The classes you want to be reloaded upon modification should be put
#       here.

repositories=/dist/MelatiBoards/target/MelatiBoards-1.1.2.jar
#Board templates
repositories=/dist/MelatiBoards/src/org/paneris/
repositories=/dist/MelatiBoards/etc/properties/
# Melati classes
repositories=/inst/melati_0.7.0/lib/melati.jar
# Melati templates
repositories=/inst/melati_0.7.0/src/
repositories=/inst/melati_0.7.0/lib/webmacro-1.0.jar
repositories=/inst/melati_0.7.0/lib/pg73jdbc3.jar
repositories=/dist/MelatiBoards/lib/activation.jar
repositories=/dist/MelatiBoards/lib/mail.jar
repositories=/dist/MelatiBoards/lib/jakarta-oro-2.0.jar
repositories=/inst/melati_0.7.0/lib/webmacro-1.0.jar

# Classloader parameters
#########################

# Enable servlet class autoreloading.
# Syntax: autoreload.classes=[true,false] (boolean)
# Default: true
autoreload.classes=false

# Enable servlet resourced autoreloading (properties and other loaded resources)
# Syntax: autoreload.file=[true,false] (boolean)
# Default: true
autoreload.file=false

# Set the number of millisecond to wait before giving up on initializing a servlet.
# (a timeout of zero means no timeout)
# Syntax: init.timeout=(long)>0
# Default: 10000 (10 secs)
init.timeout=10000

# Set the number of millisecond to wait before giving up on destroying a servlet.
# (a timeout of zero means no timeout)
# Syntax: destroy.timeout=(long)>0
# Default: 10000 (10 secs)
destroy.timeout=10000

# Session Cookie Parameters
############################

# Set whether or not to use cookies to maintain session state.
# If false, then response.encodeUrl() will always be the method
# to maintain session state. If true, then the servlet engine will
# attempt to set a cookie when request.getSession(true) is called.
# Syntax: session.useCookies=[true,false] (boolean)
# Default: true
session.useCookies=true

# Set the number of millisecond to wait before invalidating an unused session.
# Syntax: session.timeout=(long)>0
# Default: 1800000 (30 mins)
#session.timeout=1800000

# We'll use 5 hours in case we have _really_ long uploads
session.timeout=18000000

# Set how frequently (milliseconds) to check for timed-out sessions.
# Syntax: session.checkFrequency=(long)>0
# Default: 30000 (30 secs)
session.checkFrequency=30000

# Set the domain= header that gets sent with the cookie. This is
# entirely optional
# Default: null
#session.topleveldomain=.foo.com

# SingleThreadModel Servlets parameters
########################################

# Set the initial capacity of the STM servlets pool.
# Syntax: singleThreadModelServlet.initialCapacity=(int)>1
# Default: 5
singleThreadModelServlet.initialCapacity=5

# Set the number of servlet instances should be added to the pool if found empty.
# Syntax: singleThreadModelServlet.incrementCapacity=(int)>1
# Default: 5
singleThreadModelServlet.incrementCapacity=5

# Set the maximum capacity of the STM pool
# Syntax: singleThreadModelServlet.maximumCapacity=(int)>1
# Default: 10
singleThreadModelServlet.maximumCapacity=10

################### S E R V L E T    P A R A M E T E R S ######################

################################## N O T E ####################################
# When "classname" is specified, it means a Java dot-formatter full class name
# without the ".class". For example, a class with source file named 
# "Dummy.java" with a package name "org.fool" is defined as "org.fool.Dummy".
#
# Since each servlet may have lots of private initialization data, Apache JServ
# allows you to store those servlet initArgs in a separate file. To do this,
# simply do not set any initArgs in this file: Apache JServ will then look for
# a file named "[servlet classname].initargs" in the same directory of that 
# class. Note that this may work with even class archives.
###############################################################################
# Servlet Aliases
##################

# This defines aliases from which servlets can be invoked.
# Each alias give a new instance of the servlet. This means that if a servlet 
# is invoked both by class name and by alias name, it will result in _TWO_ 
# instances of the servlet being created.
# Syntax: servlet.[alias].code=[classname] (String)
# Default: NONE
# servlet.snoop.code=SnoopServlet
# servlet.hello.code=org.fool.Dummy
servlet.smtp.code=org.paneris.melati.boards.receivemail.SMTPServerServlet
servlet.nntp.code=org.paneris.melati.boards.receivemail.nntp.NNTPServerServlet
servlet.BoardAdmin.code=org.paneris.melati.boards.BoardAdmin

# Startup Servlets
###################

# Comma or space delimited list of servlets to launch on startup.
# This can either be a class name or alias.
# Syntax: servlets.startup=[classname or alias],[classname or alias],...
# Default: NONE
# servlets.startup=hello,snoop,org.fool.Dummy
servlets.startup=nntp,smtp

# Global Init Parameters
#########################

# Parameters passed here are given to each of servlets. You should put 
# configuration information that is common to all servlets.
#
# The value of the property is a comma delimited list of "name=value" pairs 
# that are accessible to the servlet via the method getInitParameter() 
# in ServletConfig.
# Syntax: servlets.default.initArgs=[name]=[value],[name]=[value],...
# Default: NONE
# servlets.default.initArgs=common.to.everybody=Hi everybody!

# Servlet Init Parameters
##########################

# These properties define init parameters for each servlet that is invoked 
# by its classname.
# Syntax: servlet.[classname].initArgs=[name]=[value],[name]=[value],...
# Default: NONE
# servlet.org.fool.Dummy.initArgs=message=I'm a dummy servlet

# Aliased Servlet Init Parameters
##################################

# These properties define init parameters for each servlet that is invoked 
# by its alias.
# Syntax: servlet.[alias].initArgs=[name]=[value],[name]=[value],...
# Default: NONE
# servlet.snoop.initArgs=message=I'm a snoop servlet
# servlet.hello.initArgs=message=I say hello world to everyone
servlet.smtp.initArgs=port=1618
servlet.smtp.initArgs=properties=smtpServer.properties
servlet.smtp.initArgs=log=/usr/local/apache/log/smtpserver.log
servlet.nntp.initArgs=database=boardsdemo
servlet.nntp.initArgs=prefix=org.paneris
servlet.nntp.initArgs=log=/usr/local/apache/log/nntpserver.log
servlet.nntp.initArgs=port=8119
servlet.nntp.initArgs=identifier=org.paneris

